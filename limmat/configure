#!/bin/sh
#--------------------------------------------------------------------------#
# default configuration
#
inline=no
optimize=yes
sat2002=no
wide=no
externaldefines=no
#--------------------------------------------------------------------------#
fmt="%-20s ..."
tmp=""
cwd=`pwd`
#--------------------------------------------------------------------------#
die_without_nl() {
  if [ ! x"$tmp"  = x ]
  then
    rm -rf $tmp
  fi
  echo "*** configure: $1" 1>&2
  exit 1
}
#--------------------------------------------------------------------------#
die() {
  echo
  die_without_nl $*
}
#--------------------------------------------------------------------------#
usage() {
cat <<EOF
usage: configure [ <option> ... ]

where <option> is one of the following

  -O           generate optimized code (default)
  -g           generate debugging code (opposite to -O)
  --sat2002    output conforms to the SAT 2002 competition format

As default we look whether we can find 'gcc' on the system.  If 'gcc' is not
found we try 'cc'.  You can specify another compiler explicitly with setting
the environment variable 'CC'.  From a Bourne style shell this can simply be
done by prefixing the call to 'configure' with an assignment to 'CC' as in

  CC=ccc ./configure

The same technique applies to the compiler flags 'CFLAGS'.
EOF
exit 0
}
#--------------------------------------------------------------------------#
debugging_specified=no
optimization_specified=no
while [ $# -gt 0 ]
do
  case $1 in
    -h | --help) usage;;
    -O) optimization_specified=yes;;
    -g) debugging_specified=yes;;
    --sat2002) sat2002=yes;;
    --benchmark) externaldefines=yes;;
    -*) die_without_nl "unknown command line option (try '-h')";;
  esac
  shift
done
#--------------------------------------------------------------------------#
[ $debugging_specified = yes -a $optimization_specified = yes ] &&
  die_without_nl "you can not specify '-O' and '-g' at the same time"
[ $debugging_specified = yes ] && optimize=no
[ $optimization_specified = yes ] && optimize=yes
#--------------------------------------------------------------------------#
printf "$fmt" version
version=`cat VERSION`
echo " $version"
#--------------------------------------------------------------------------#
printf "$fmt" "SAT 2002 format"
echo " $sat2002"
#--------------------------------------------------------------------------#
printf "$fmt" optimization
echo " $optimize"
#--------------------------------------------------------------------------#
printf "$fmt" "temporary directory"
tmp="/tmp/limmat-configure-$$"
[ -f $tmp -o -d $tmp ] &&
  die "directory $tmp already exists (remove it manually)"
trap "rm -rf $tmp" 2
if mkdir $tmp 2>/dev/null
then
  echo " done"
else
  die "could not generate directory $tmp"
fi
#--------------------------------------------------------------------------#
printf "$fmt" CC
if [ x"$CC" = x ]
then
  cd $tmp || die "could not change to $tmp"
  cat <<EOF >testcc.c
#include <stdio.h>
int main(void) {
  printf ("compiled\n");
  exit(0);
  return 0;
}
EOF
  found=no
  for cc in gcc cc
  do
    if $cc -o testcc testcc.c 1>/dev/null 2>/dev/null
    then
      if ./testcc 1>testcc.log 2>/dev/null
      then
	if [ "`cat testcc.log`" = compiled ]
	then
	  found=yes
	  break
	fi
      fi
    fi
  done
  if [ $found = yes ]
  then
    CC="$cc"
  else
    die "no compiler found (try '-h')"
  fi
  cd $cwd
fi
echo " $CC"
#--------------------------------------------------------------------------#
printf "$fmt" compiler
compiler=unknown
for compiler in $CC
do
  case $compiler in
    gcc | icc | lcc | ccc | cc)
      compiler=$compiler
      break
      ;;
    *)
      ;;
  esac
done
echo " $compiler"
test "$compiler" = unknown && \
  die_wihout_nl "specify valid compiler or fix configure"
#--------------------------------------------------------------------------#
printf "$fmt" CFLAGS
if [ x"$CFLAGS" = x ]
then
  case $compiler in
    gcc)
      CFLAGS="-Wall"
      if [ $optimize = no ]
      then
        CFLAGS="$CFLAGS -g"
      else
        CFLAGS="$CFLAGS -O3"
	case `uname -m` in
	  sun4u) CFLAGS="$CFLAGS -mcpu=v8";;
	  i486) CFLAGS="$CFLAGS -mcpu=i486";;
	  i586) CFLAGS="$CFLAGS -mcpu=i586";;
	  i686) CFLAGS="$CFLAGS -mcpu=i686";;
	  alpha)
	    if [ "`uname -s`" = Linux ]
	    then
	      cpu="`awk '/cpu model/{print $NF}' /proc/cpuinfo`"
	      case "$cpu" in
	        EV67) CFLAGS="$CFLAGS -mcpu=ev67";;
	      esac
	    fi
	    ;;
	esac;
      fi
      ;;
    *)
      if [ $debug = yes ]
      then
        CFLAGS="-g"
      else
        CFLAGS="-O"
      fi 
      if [ "$compiler" = cc -a "`uname`" = Darwin ]
      then
        CFLAGS="$CFLAGS -Wall"
      fi
      ;;
  esac
fi
echo " $CFLAGS"
#--------------------------------------------------------------------------#
printf "$fmt" "pointer width"
cd $tmp || die "could not change to $tmp"
rm -f ptrwidth.c
cat <<EOF > ptrwidth.c
#include <stdio.h>
int main (void)
{
  printf ("%d", (int) sizeof(void*));
  exit(0);
}
EOF
$CC -o ptrwidth ptrwidth.c 1>/dev/null 2>/dev/null || \
  die "compilation of 'ptrwidth.c' failed"
rm -f bytes
./ptrwidth 1>bytes 2>/dev/null || \
  die "running 'ptrwidth' failed"
bytes=`cat bytes`
case x"$bytes" in
  x4) wide=no;;
  x8) wide=yes;;
  *) die "failed to read bytes";;
esac
cd $dir
if [ $wide = yes ]
then
  echo " wide (64 bit)"
else
  echo " narrow (32 bit)"
fi
cd $cwd
#--------------------------------------------------------------------------#
printf "$fmt" "inline"
if [ $optimize = yes ]
then
  inline=yes
  echo " yes (but not checked)"
else
  inline=no
  echo " no (since optimization disabled)"
fi
#--------------------------------------------------------------------------#
printf "$fmt" "generating Makefile"
rm -f Makefile
sed  \
-e "s|@CC@|$CC|" \
-e "s|@CFLAGS@|$CFLAGS|" \
Makefile.in > Makefile
echo " done"
#--------------------------------------------------------------------------#
printf "$fmt" "generating config.h"
rm -f config.h
echo "#ifndef _config_h_INCLUDED" >> config.h
echo "#define _config_h_INCLUDED" >> config.h
echo "" >> config.h
[ $sat2002 = yes ] && echo "#define SAT2002FMT" >> config.h
[ $inline = no ] && echo "#define NO_INLINE_KEYWORD" >> config.h
echo "#define LIMMAT_VERSION \"$version\"" >> config.h
[ $externaldefines = yes ] && echo "#define EXTERNAL_DEFINES" >> config.h
[ $wide = yes ] && echo "#define WIDE_POINTERS" >> config.h
[ $optimize = yes ] && echo "#define NDEBUG" >> config.h
echo "" >> config.h
echo "#endif /* _config_h_INCLUDED */" >> config.h
echo " done"
#--------------------------------------------------------------------------#
printf "$fmt" cleanup
cd $cwd
rm -rf $tmp
echo " done"
#--------------------------------------------------------------------------#
