/*
 *   boolframwork - boolean framework for undertaker and satyr
 *
 * Copyright (C) 2012 Ralf Hackner <rh@ralf-hackner.de>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

#include "PicosatCNF.h"
#include "IOException.h"

#include<stdlib.h>
#include<stdio.h>
#include<iostream>
#include<sstream>

#include "KconfigWhitelist.h"

using namespace std;
using namespace kconfig;

static bool picosatIsInitalized = false;

PicosatCNF::PicosatCNF(int defaultPhase)
{
    if(picosatIsInitalized) {
        Picosat::picosat_reset();
    }
    Picosat::picosat_init();
    picosatIsInitalized = true;

    Picosat::picosat_set_global_default_phase(defaultPhase);
    this->varcount=0;
    this->clausecount=0;
}

PicosatCNF::~PicosatCNF()
{
    //Picosat::picosat_reset();
}

void PicosatCNF::readFromFile(istream &)
{

    //TODO
}

void PicosatCNF::toFile(string &path)
{
    //we need a FILE* for picosat_print
    //so we have to use c framework instead of std::stream
    FILE *out = fopen(path.c_str(),"w");
    if(!out) {
        throw IOException("can 't open file");
    }

    map<string, int>::iterator it;
    for(it = this->symboltypes.begin(); it != this->symboltypes.end(); it++) {
        const string &sym = it->first;

        int type = it->second;
        fprintf(out, "c sym %s %d\n", sym.c_str(), type);
    }

    map<string, int>::iterator it1;
    for(it1 = this->cnfvars.begin(); it1 != this->cnfvars.end(); it1++) {
        const string &sym = it1->first;
        int var = it1->second;
        fprintf(out, "c var %s %d\n", sym.c_str(), var);
    }
    fflush(out);
    fprintf(out, "c generated by satyr\n");
    Picosat::picosat_print(out);
    fclose(out);
}

int PicosatCNF::getSymbolType(string &name)
{
    return this->symboltypes[name];
}

void PicosatCNF::setSymbolType(string &sym, int type)
{
    this->symboltypes[sym] = type;
}

int PicosatCNF::getCNFVar(string &var)
{
    //TODO: add new mapping for unknown variables
    //necessary since mapping is done by CNFBuilder, not by picosat itself
    return this->cnfvars[var];
}

void PicosatCNF::setCNFVar(string &var, int CNFVar)
{
    this->cnfvars[var] = CNFVar;
    this->boolvars[CNFVar] = var;
}

string &PicosatCNF::getSymbolName(int CNFVar)
{
    return this->boolvars[CNFVar];
}

void PicosatCNF::pushVar(int v)
{
    if(v > this->varcount) {
        this->varcount=v;
    }
    if(-v > this->varcount) {
        this->varcount=-v;
    }
    if(v == 0) {
        this->clausecount++;
    }
    Picosat::picosat_add(v);
}

void PicosatCNF::pushVar(string  &v, bool val)
{
    int sign = val ? 1 : -1;
    int cnfvar = this->getCNFVar(v);
    this->pushVar(sign * cnfvar);
}

void PicosatCNF::pushClause(void)
{
    this->clausecount++;
    Picosat::picosat_add(0);
}

void PicosatCNF::pushClause(int *c)
{
    while (*c) {
        this->pushVar(*c);
        c++;
    }
    this->pushClause();
}

void PicosatCNF::pushAssumption(int v)
{
    Picosat::picosat_assume(v);
}

void PicosatCNF::pushAssumption(string &v,bool val)
{
    int cnfvar = this->getCNFVar(v);
    if(val)
        this->pushAssumption(cnfvar);
    else
        this->pushAssumption(-cnfvar);
}

void PicosatCNF::pushAssumption(const char *v,bool val)
{
    string s(v);
    this->pushAssumption(s, val);
}

bool PicosatCNF::checkSatisfiable(void)
{
    return Picosat::picosat_sat(-1) == PICOSAT_SATISFIABLE;
}

void PicosatCNF::readAssumptionsFromFile(istream &i)
{
#if 0
   string line;
    while(! getline (i,line).eof()) {
        if(line == "" || line[0] == '#') {
            continue;
        }
        stringstream l(line);
        string sym;
        string val;
        getline(l, sym, '=');
        getline(l, val, '\n');
        string symR = sym.substr(7, sym.length()-7);

        enum symbol_type type = this->getSymbolType(symR);
        string symM = sym + "_MODULES";

        switch(type) {
            case S_BOOLEAN:
                if(val == "y")
                    this->pushAssumption(sym,true);
                else
                    this->pushAssumption(sym,false);
                break;
            case S_TRISTATE:
                if(val == "y")
                    this->pushAssumption(sym,true);
                else if (val == "m") {
                    this->pushAssumption(symM,true);
                }
                else {
                    this->pushAssumption(sym,false);
                    this->pushAssumption(symM,false);
                }
                break;
            case S_INT: case S_HEX:case S_STRING:
                //TODO!!!
                break;
            case S_OTHER: case S_UNKNOWN:
                break;

            default:
                //just to make the compiler happy
                break;
        }
    }
#endif
}

bool PicosatCNF::deref(int s)
{
    return Picosat::picosat_deref(s) == 1;
}

bool PicosatCNF::deref(string &s)
{
    int cnfvar = this->getCNFVar(s);
    return this->deref(cnfvar);
}

std::map<string, int>::const_iterator PicosatCNF::getSymbolsItBegin()
{
    return this->cnfvars.begin();
}

std::map<string, int>::const_iterator PicosatCNF::getSymbolsItEnd()
{
    return this->cnfvars.end();
}
