#!/usr/bin/env python
#
#   golem - analyze feature dependencies in Linux makefiles
#
# Copyright (C) 2011 Reinhard Tartler <tartler@informatik.uni-erlangen.de>
# Copyright (C) 2011 Christian Dietrich <christian.dietrich@informatik.uni-erlangen.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import logging
import sys
from os.path import join, dirname

from optparse import OptionParser

sys.path = [join(dirname(sys.path[0]), 'lib', 'python%d.%d' % \
                     (sys.version_info[0], sys.version_info[1]), 'site-packages')] \
                     + sys.path


from vamos.tools import setup_logging, get_linux_version, NotALinuxTree
from vamos.golem.kbuild import *


def main():
    parser = OptionParser(usage="%prog [options]")

    parser.add_option('-v', '--verbose', dest='verbose', action='count',
                      help="increase verbosity (specify multiple times for more)")
    parser.add_option('-l', '--list', dest='do_list', action='store_true',
                      help="list all object files that would be built"\
                          +" in the current configuration")
    parser.add_option('-o', '--options', dest='do_opt', action='store_true', default=False,
                      help="list configuration options mentioned in Linux makefiles")
    parser.add_option('-c', '--compiled', dest='compiled', action='append',
                      help="check if a given file is compiled"\
                      +" in the current configuration. This option can"\
                      +" be given multiple times.")
    parser.add_option('-m', '--model', dest='model', action='store',
                      help="model to use for calculation")

    (opts, args) = parser.parse_args()

    setup_logging(opts.verbose)

    if len(args) > 0:
        print "golem - analyzes feature dependencies in Linux makefiles"
        parser.print_help()
        print "\nGolem takes only options, no arguments"
        sys.exit(1)

    try:
        logging.info("using Linux version %s", get_linux_version())
    except NotALinuxTree as e:
        logging.error("Failed to determine Linux version: %s", e)
        sys.exit(1)

    if opts.do_opt:
        variables = determine_buildsystem_variables()
        logging.info("Detected %d Kconfig variables in Makefiles", len(variables))
        for v in variables:
            print v
        sys.exit(0)

    if opts.do_list:
        if opts.verbose > 0:
            how = True
        else:
            how = False
        try:
            files = files_for_current_configuration(how)
            logging.info("Detected %d files with current configuration", len(files))
            for f in sorted(files):
                print f
        except TreeNotConfigured:
            logging.error("Your Linux tree is not configured, please configure it first")
            sys.exit(1)
        sys.exit(0)
    elif opts.compiled:
        try:
            for filename in opts.compiled:
                status = file_in_current_configuration(filename)
                print filename, status
        except TreeNotConfigured:
            logging.error("Your Linux tree is not configured, please configure it first")
            sys.exit(1)
        sys.exit(0)
    else:
        print "No option given"
        parser.print_help()
        sys.exit(1)

if __name__ == "__main__":
    main()
