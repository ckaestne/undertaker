#!/usr/bin/env python
#
#   vampyr - analyzes feature dependencies in Linux source files
#
# Copyright (C) 2011 Christian Dietrich <christian.dietrich@informatik.uni-erlangen.de>
# Copyright (C) 2011-2012 Reinhard Tartler <tartler@informatik.uni-erlangen.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import logging
from os.path import join, dirname

from optparse import OptionParser

sys.path = [join(dirname(sys.path[0]), 'lib', 'python%d.%d' % \
                     (sys.version_info[0], sys.version_info[1]), 'site-packages')] \
                     + sys.path

from vamos.tools import setup_logging, calculate_worklist, check_tool
from vamos.vampyr import BuildFrameworks
from vamos.vampyr.Configuration import Configuration
from vamos.vampyr.Messages import MessageContainer


def do_checks(options, filename, configs):
    """returns a dictionary with errors"""
    errors = dict()

    print "Checking %d configuration(s):" % len(configs)
    for c in configs:
        # for kconfig, this will automatically try to expand the configuration
        # for bare, this will be a noop
        c.switch_to()

        for tool in options['call']:
            if not hasattr(c, "call_" + tool):
                logging.error(tool + " not supported by this build system")
                continue

            try:
                analyzer = getattr(c, "call_" + tool)
            except:
                raise RuntimeError("Couldn't call analyzer '%s'" % tool)

            try:
                msgs = analyzer(filename)
            except RuntimeError as error:
                logging.error(error)
                continue

            if tool not in errors:
                errors[tool] = MessageContainer()

            for msg in msgs:
                # Discard messages from other files
                if options['exclude_others']:
                    if not filename in msg.location:
                        logging.debug("Discarded error messge (--exclude-others): %s", repr(msg))
                        continue
                errors[tool].add_message(c, msg)

    return errors

def handle_file(options, filename):

    frameworks = {'kbuild' : BuildFrameworks.KbuildBuildFramework,
                  'linux'  : BuildFrameworks.KbuildBuildFramework,
                  'bare'   : BuildFrameworks.BareBuildFramework}

    if options['framework'] in frameworks:
        framework = frameworks[options['framework']](options)
    else:
        raise RuntimeError("Build framework '%s' not found" % options['framework'])

    configs = framework.calculate_configurations(filename)
    if len(configs) == 0:
        logging.error("File %s did not contain any configurations", filename)
        return

    errors = do_checks(options, filename, configs)

    config_dependent_messages = 0
    for c in configs:
        assert(isinstance(c, Configuration))
        total_errors_for_config = 0
        for tool in errors.keys():
            for message in errors[tool]:
                if c in message.in_configurations:
                    total_errors_for_config += 1

        print "%s:\t%d errors" % (str(c), total_errors_for_config)


    if len(configs) == 1 or options['loglevel'] < logging.WARNING:
        format_errors(errors)

    if len(configs) == 1:
        return

    for tool in errors.keys():
        for message in errors[tool]:
            is_configuration_dependent = len(message.in_configurations) < len(configs)
            if is_configuration_dependent:
                print "   Not in all configs: " + message.get_report()
                config_dependent_messages += 1

    print "Found %d configuration dependent errors" % config_dependent_messages

def format_errors(errors):
    for tool in errors.keys():
        if len(errors[tool]) > 0:
            print "  ---- %s: ----" % tool
            print "\n\n".join([x.get_report() for x in errors[tool]])
            print "  -------------"


def main():
    parser = OptionParser(usage="%prog [options] <filename>")
    parser.add_option('-v', '--verbose', dest='verbose', action='count',
                      help="increase verbosity (specify multiple times for more)")
    parser.add_option("-O", '--args', dest='args', action='append', type="string",
                      default=[],
                      help="add options to called programs, like -Osparse,-Wall")
    parser.add_option("-C", '--call', dest='call', action='append', type="string",
                      default=[],
                      help="add static analyzers to call stack, like -C gcc -C sparse")
    parser.add_option("", '--exclude-others', dest='exclude_others', action='store_true',
                      default=False,
                      help="suppress warnings in '#included' source files")
    parser.add_option("-f", '--framework', dest='framework', action='store', type="string",
                      default="bare",
                      help="select build framework (one of 'bare', 'kbuild')")
    parser.add_option('-b', '--batch', dest='batch_mode', action='store_true',
                      help="operate in batch mode, read filenames from given worklists")

    (opts, args) = parser.parse_args()

    setup_logging(opts.verbose)

    if len(args) < 1:
        print "Vampyr - VAMOS Variability aware static analyzer driver\n"
        parser.print_help()
        sys.exit(1)

    options = { 'args': {},
                'exclude_others': opts.exclude_others,
                'framework': opts.framework,
                'loglevel': logging.getLogger().getEffectiveLevel()}

    for arg in opts.args:
        if not "," in arg:
            logging.critical("Couldn't parse --args argument: %s", arg)
            sys.exit(-1)
        (key, value) = arg.split(",", 1)
        options['args'][key] = value

    options['call'] = []

    if len(opts.call) == 0:
        print "Please use the -C option to specify what static analyzers to use"
        sys.exit(1)

    for call in opts.call:
        if ',' in call:
            options['call'].extend(call.split(","))
        else:
            options['call'].append(call)

        # check if the specified tools are available in the default search path
        if call == 'gcc' and not check_tool('gcc --version'):
            sys.exit(1)

        if call == 'sparse' and not check_tool('sparse'):
            sys.exit(1)

        # add default options if not set by user
        if (call == 'gcc' and 'gcc' not in options['args']):
            options['args']['gcc'] = "-Wall -Wextra"

        if (call == 'sparse' and 'sparse' not in options['args']):
            options['args']['sparse'] = "-Wsparse-all"

    for tool in ("fakecc", "make --version"):
        if not check_tool(tool):
            sys.exit(1)

    for fn in calculate_worklist(args, batch_mode=opts.batch_mode):
        handle_file(options, fn)


if __name__ == "__main__":
    main()
